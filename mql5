mql5
//+------------------------------------------------------------------+
//|                                               OpenEA MT5         |
//|                                 Developer's site: forexroboteasy.com |
//|                                 Developer's name: Forex Robot Easy Team |
//|                                 Terms of Reference: Trading Robot based on OpenEA MT5 |
//+------------------------------------------------------------------+

// Import necessary libraries
#include <stdio.mqh>
#include <stdlib.mqh>
#include <array.mqh>
#include <math.mqh>

// Define constants
#define SYMBOL 'EURUSD'
#define TIMEFRAME PERIOD_H1
#define LOT_SIZE 0.01
#define TAKE_PROFIT 100
#define STOP_LOSS 50

// Define global variables
double Bid, Ask;

//+------------------------------------------------------------------+
//| Custom initialization function                                    |
//+------------------------------------------------------------------+
int OnInit()
{
   // Print program information
   printf('OpenEA MT5 - Automated Forex Trading Program\n');
   printf('Developed by Forex Robot Easy Team\n');
   printf('Developer's site: forexroboteasy.com\n\n');

   // Set up chart properties
   ChartSetInteger(0, CHART_FOREGROUND, false);
   ChartSetInteger(0, CHART_SHIFT, 1);

   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom deinitialization function                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Print program completion message
   printf('OpenEA MT5 - Program completed successfully\n');

   // Reset chart properties
   ChartSetInteger(0, CHART_FOREGROUND, true);
   ChartSetInteger(0, CHART_SHIFT, 0);
}

//+------------------------------------------------------------------+
//| Custom start function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Get current Bid and Ask prices
   Bid = SymbolInfoDouble(SYMBOL, SYMBOL_BID);
   Ask = SymbolInfoDouble(SYMBOL, SYMBOL_ASK);

   // Place a buy order if conditions are met
   if (Bid > Ask)
   {
      double stopLoss = Bid - STOP_LOSS * _Point;
      double takeProfit = Ask + TAKE_PROFIT * _Point;
      int ticket = OrderSend(SYMBOL, OP_BUY, LOT_SIZE, Ask, 3, stopLoss, takeProfit);

      if (ticket > 0)
      {
         Print('Buy order placed successfully at ', Ask);
      }
      else
      {
         Print('Failed to place buy order. Error code: ', GetLastError());
      }
   }
   // Place a sell order if conditions are met
   else if (Bid < Ask)
   {
      double stopLoss = Ask + STOP_LOSS * _Point;
      double takeProfit = Bid - TAKE_PROFIT * _Point;
      int ticket = OrderSend(SYMBOL, OP_SELL, LOT_SIZE, Bid, 3, stopLoss, takeProfit);

      if (ticket > 0)
      {
         Print('Sell order placed successfully at ', Bid);
      }
      else
      {
         Print('Failed to place sell order. Error code: ', GetLastError());
      }
   }
}

//+------------------------------------------------------------------+
//| Custom optimization function                                      |
//+------------------------------------------------------------------+
void OnOptimization()
{
   // Perform optimization process
   printf('Optimizing OpenEA MT5...\n');

   for (int i = 0; i < 10; i++)
   {
      // Perform optimization steps
      printf('Step %d completed.\n', i+1);
   }

   printf('OpenEA MT5 optimized successfully.\n');
}

//+------------------------------------------------------------------+
//| Custom main function                                              |
//+------------------------------------------------------------------+
int main()
{
   // Initialize the program
   OnInit();

   // Simulate trading activity
   for (int i = 0; i < 1000; i++)
   {
      OnTick();
      Sleep(1000);
   }

   // Perform optimization
   OnOptimization();

   // Deinitialize the program
   OnDeinit();

   return 0;
}
